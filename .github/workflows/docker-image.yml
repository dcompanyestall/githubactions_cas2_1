name: Docker Image CI
# Installs cosign
# Set up BuildKit Docker container to build multi-platform images
# Logs in github container registry
# Extracts metadata for better tagging.
# Builds and pushes the image to ghcr.io.
# Uses anchore/sbom-action to generate an SBOM in SPDX format.
# Upload SBOM to GitHub Release
# Uploads the SBOM as an artifact to GitHub.
# Signs the resulting container image digest with cosing ephemeral key 

on:
  push:
    branches: [ "main" ]
    # Publish server tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

permissions:
    contents: write
    packages: write
    id-token: write
    actions: write
    security-events: write

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout the repository code
      uses: actions/checkout@v4

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
      with:
        cosign-release: 'v2.2.4'

    # Set up BuildKit Docker container builder to be able to build
    # multi-platform images and export cache
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Docker image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          
    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM using Anchore SBOM Action
      uses: anchore/sbom-action@v0
      with:
        #image: "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
        image: "dcompanyestall/githubactions_cas2_1:main"
        format: "spdx-json"
        output-file: "sbom.spdx.json"
    
    #- name: Install Syft for SBOM generation
    #  run: |
    #    curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    #    syft version

    #- name: Generate SBOM
    #  run: |
    #    syft ${{ secrets.DOCKERHUB_USERNAME }}/githubactions_cas2_0:v1 -o spdx-json > sbom.spdx.json

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-spdx-json
        path: sbom.spdx.json
  
    - name: Upload SBOM to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: sbom.spdx.json
        tag_name: latest-sbom
        name: "SBOM for latest container image"
        body: "This is the SBOM for the latest Docker image."
        draft: false
        prerelease: false

    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
      
      #- name: Scan the image and upload dependency results
      #  uses: anchore/sbom-action@v0.18.0
      #  with:
      #    image: "dcompanyestall/githubactions_cas2_0:main"
      #    output-file: sbom-spdx-json
        #artifact-name: sbom-spdx-json
        #id: sbom-spdx-json
     #   dependency-snapshot: true
        #debug: true 
        #username: ${{ secrets.DOCKERHUB_USERNAME }}
        #password: ${{ secrets.DOCKERHUB_TOKEN }}
      #env:
      #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #- name: Debug SBOM file
     # run: |
     #   ls -l *spdx.json || echo "SBOM file not found!"

    #- name: Upload SBOM as artifact
    #  uses: actions/upload-artifact@v4 # Updated to v4
    #  with:
    #    name: sbom-spdx-json
    #    path: sbom.spdx.json

    # Example: Scan the image for vulnerabilities (optional)
    #- name: Trivy vulnerability scan
    #  run: |
    #    IMAGE_NAME=dcompanyestall/githubactions_cas2_0:main
    #    trivy image --format json --output vulnerability-report.json "$IMAGE_NAME"
      
    #- name: Upload Vulnerability Scan Report
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: vulnerability-report.json
    #    path: vulnerability-report.json 
  

